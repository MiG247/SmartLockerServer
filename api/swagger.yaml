swagger: "2.0"
info:
  version: "1.0.0"
  title: "Smartlocker API"

################################################################################
#                                           Paths                              #
################################################################################


paths:
  /:
    get:
      tags:
      - "Smartlocker"
      description: "Return the landing page."
      operationId: "getHtml"
      produces:
      - "text/html"
      parameters: []
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Smartlocker"

  /combo:
    get:
      tags:
      - "Smartlocker"
      description: "Gets an array of 'combo' objects. For Clerk and Client."
      operationId: "getComboArray"
      parameters:
      - $ref: "#/parameters/size"
      - $ref: "#/parameters/offset"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Combo"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /timeschedule:
    get:
      tags:
      - "Smartlocker"
      description: "Gets an array of 'timeschedule' objects. For Clerk and Client"
      operationId: "getTimeSchedule"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TimeSchedule"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /order:
    get:
      tags:
      - "Smartlocker"
      description: "Gets an array of 'orders' objects. Only for Clerk"
      operationId: "getOrderArray"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        403:
          description: "No permission to view this data, Clerk token needed"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"
    post:
      tags:
      - "Smartlocker"
      description: "Requests an order and gets a orderID back if successed. Only for Client"
      operationId: "setOrder"
      consumes:
        - application/json
      parameters:
        - in: "body"
          name: "set_order"
          description: "set order object"
          required: true
          schema:
            $ref: "#/definitions/Set_Order"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Locker_Schedule"
        404:
          description: "Not Found"
        403:
          description: "Could not produce a Token"
        406:
          description: "Order Not Accepted"
        default:
          description: "unexprected error"
      x-swagger-router-controller: "Smartlocker"

  /order/{orderID}:
    parameters:
    - $ref: "#/parameters/orderID"
    get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from an order. Only for Client."
      operationId: "getOrder"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserOrder"
        403:
            description: "No permission to view this data, Clerk or User token needed"
        500:
            description: "Error on Database"
            schema:
              $ref: "#/definitions/ErrorModel"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /combo/food/{comboID}:
    parameters:
    - $ref: "#/parameters/comboID"
    get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from a combo the food. For Clerk and Client."
      operationId: "getComboFood"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Food"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /combo/ingredient/{comboID}:
     parameters:
     - $ref: "#/parameters/comboID"
     get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from the food ingredients. For Clerk and Client"
      operationId: "getComboIngredient"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ingredient"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /close/combo/:
      put:
        tags:
        - "Smartlocker"
        description: "Sets the Status of a Combo. For Clerk."
        operationId: "updateCombo"
        consumes:
        - application/json
        parameters:
          - in: "body"
            name: "combo"
            description: "combo object"
            required: true
            schema:
              $ref: "#/definitions/Combo"
        responses:
          200:
            description: "OK"
            schema:
              items:
                $ref: "#/definitions/Combo"
          403:
            description: "No permission to view this data, Clerk token needed"
          500:
            description: "Error on Database"
            schema:
              $ref: "#/definitions/ErrorModel"
          404:
            description: "Not Found"
          default:
            description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /close/order/:
      put:
        tags:
        - "Smartlocker"
        description: "Sets an order to served. For Clerk"
        operationId: "updateOrder"
        consumes:
        - application/json
        parameters:
          - in: "body"
            name: "close_order"
            description: "close order object"
            required: true
            schema:
              $ref: "#/definitions/Close_Order"
        responses:
          200:
            description: "OK"
          403:
            description: "No permission to view this data, Clerk token needed"
          500:
            description: "Error on Database"
            schema:
              $ref: "#/definitions/ErrorModel"
          404:
            description: "Not Found"
          default:
            description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /locker:
      get:
        tags:
        - "Smartlocker"
        description: "Gets an array of 'orders' objects. For LockerApp."
        operationId: "getLockerArray"
        responses:
          200:
            description: "OK"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/Locker"
          500:
            description: "Error on Database"
            schema:
             $ref: "#/definitions/ErrorModel"
          default:
            description: "unexpected error"
        x-swagger-router-controller: "Smartlocker"
  /locker/verify:
      get:
        tags:
        - "Smartlocker"
        description: "verifies the PIN of a Locker. For LockerApp"
        operationId: "verifyPIN"
        consumes:
          - application/json
        parameters:
          - in: "body"
            name: "locker"
            description: "Locker PIN"
            required: true
            schema:
              $ref: "#/definitions/Locker"
        responses:
          200:
            description: "OK"
            schema:
              items:
                $ref: "#/definitions/Locker"
          403:
            description: "No permission to view this data, LockerApp token needed"
          406:
            description: "Not Allowed"
          404:
            description: "Not Found"
            schema:
             $ref: "#/definitions/ErrorModel"
          500:
            description: "Error on Database"
            schema:
              $ref: "#/definitions/ErrorModel"
          default:
            description: "unexpected error"
        x-swagger-router-controller: "Smartlocker"

  /auth:
    get:
      tags:
      - "Authentication"
      description: "Login to the Server and get a JSON WEB Token back."
      operationId: "getToken"
      consumes:
       - application/json
      parameters:
        - in: "body"
          name: "login"
          description: "Login informations"
          required: true
          schema:
            $ref: "#/definitions/StaffLogin"
      responses:
        200:
          description: "OK"
          schema:
            items:
              $ref: "#/definitions/Token"
        406:
          description: "Not Allowed"
        default:
          description: "unexpected error"
    x-swagger-router-controller: "Authentication"

  /admintool/roles:
    get:
      tags:
      - "Admintool"
      description: "Returns a Array of all Server Roles. Only for Admin"
      operationId: "getStaff"
      parameters:
      - $ref: "#/parameters/size"
      - $ref: "#/parameters/offset"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Staff"
        403:
          description: "No permission to view this data, Admin token needed"
        406:
          description: "Not Allowed"
        404:
          description: "Not Found"
          schema:
             $ref: "#/definitions/ErrorModel"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
    x-swagger-router-controller: "Admintool"
    patch:
      tags:
      - "Admintool"
      description:  "Patches the Role password. Only for Admin"
      operationId: "updatePassword"
      parameters:
        - in: "body"
          name: "roleData"
          description: "Information to Change the Password."
          required: true
          schema:
            $ref: "#/definitions/PatchPassword"
      responses:
        200:
          description: "OK"
        403:
          description: "No permission to chage the Password, Admin token needed"
        406:
          description: "Not Allowed"
        404:
          description: "Not Found"
          schema:
             $ref: "#/definitions/ErrorModel"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"

  /admintool/combo:
    get:
      tags:
      - "Admintool"
      description: "Returns a combo Array. Only for Admin"
      operationId: "getCombos"
      parameters:
      - $ref: "#/parameters/size"
      - $ref: "#/parameters/offset"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/AdmintoolCombo"
        403:
          description: "No permission to get the Combo, Admin token needed"
        406:
          description: "Not Allowed"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"
    post:
      tags:
      - "Admintool"
      description: "Post a new Combo entry. Only for Admin"
      operationId: "addCombo"
      parameters:
        - in: "body"
          name: "combo"
          description: "Information to add a new Combo."
          required: true
          schema:
            $ref: "#/definitions/AdmintoolCombo"
      responses:
        200:
          description: "OK"
        403:
          description: "No permission to add new Combo, Admin token needed"
        406:
          description: "Not Allowed"
        404:
          description: "Not Found"
          schema:
             $ref: "#/definitions/ErrorModel"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"
    put:
      tags:
      - "Admintool"
      description: "Update a Combo entry. Old ComboID is necessary. Only for Admin"
      operationId: "update_Combo"
      parameters:
        - in: "body"
          name: "combo"
          description: "Information to update Combo."
          required: true
          schema:
            $ref: "#/definitions/AdmintoolCombo"
      responses:
        200:
          description: "OK"
        403:
          description: "No permission to update a Combo, Admin token needed"
        406:
          description: "Not Allowed"
        404:
          description: "Not Found"
          schema:
             $ref: "#/definitions/ErrorModel"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"
    delete:
      tags:
      - "Admintool"
      description: "Delete a Combo entry. ComboID is necessary. Only for Admin"
      operationId: "deleteCombo"
      parameters:
        - in: "body"
          name: "combo"
          description: "Information to add a new Combo."
          required: true
          schema:
            $ref: "#/definitions/Combo"
      responses:
        200:
          description: "OK"
        403:
          description: "No permission to delete a Combo, Admin token needed"
        406:
          description: "Not Allowed"
        404:
          description: "Not Found"
          schema:
             $ref: "#/definitions/ErrorModel"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"

  /admintool/food:
    get:
      tags:
      - "Admintool"
      description: "Returns a food Array. Only for Admin"
      operationId: "getFoods"
      parameters:
      - $ref: "#/parameters/size"
      - $ref: "#/parameters/offset"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/AdmintoolFood"
        403:
          description: "No permission to get the Food, Admin token needed"
        406:
          description: "Not Allowed"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"
    post:
      tags:
      - "Admintool"
      description: "Post a new Food entry. Only for Admin"
      operationId: "addFood"
      parameters:
        - in: "body"
          name: "food"
          description: "Information to add a new Food."
          required: true
          schema:
            $ref: "#/definitions/AdmintoolFood"
      responses:
        200:
          description: "OK"
        403:
          description: "No permission to add new Food, Admin token needed"
        406:
          description: "Not Allowed"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Admintool"



################################################################################
#                                     Definitions                              #
################################################################################

definitions:
  AdmintoolFood:
    type: "object"
    properties:
      food_id:
        type: "integer"
        format: "int32"
        example: 34
      food_name:
        type: "string"
        example: "Cooked Rice"
      food_ingredient:
        type: "array"
        description: "Array of contained Ingredients."
        items:
          type: "integer"
          format: "int32"

  AdmintoolCombo:
    type: "object"
    properties:
      combo_id:
        type: "integer"
        format: "int32"
        example: 3
      combo_name:
        type: "string"
        example: "combo 1"
      combo_price:
        type: "number"
        format: "float"
      combo_available:
        type: "integer"
        format: "int32"
      photo:
        type: "string"
        format: "byte"
      combo_food:
        type: "array"
        description: "Array of contained Food."
        items:
          type: "integer"
          format: "int32"

  PatchPassword:
    type: "object"
    properties:
      name:
        description: "Rolename that needs a Password change"
        type: "string"
      newpassword:
        description: "New Password"
        type: "string"
      adminpassword:
        description: "Admin confirmation password"
        type: "string"

  Staff:
    type: "object"
    properties:
      name:
        type: "string"
      admin:
        description: "isAdmin? 0 = false, 1 = true"
        type: "integer"
        format: "int32"


  StaffLogin:
    type: "object"
    properties:
      name:
        type: "string"
      password:
        type: "string"

  Token:
    type: "object"
    properties:
      name:
        type: "string"
      token:
        type: "string"

  Set_Order:
    type: "object"
    properties:
      combo_id:
        type: "integer"
        format: "int32"
        example: 3
      pickup_time:
        type: "string"
        example: "10:30"

  Close_Order:
    type: "object"
    properties:
      combo_id:
        type: "integer"
        format: "int32"
        example: 3
      pickup_time:
        type: "string"
        example: "10:30"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002

  Locker:
    type: "object"
    properties:
      nr:
        type: "integer"
        format: "int32"
        example: 1002
      PIN:
        type: "integer"
        format: "int32"
        example: 6832

  UserOrder:
    type: "object"
    properties:
      id:
        type: "string"
        example: "df7cca36-3d7a-40f4-8f06-ae03cc22f041"
      combo_id:
        type: "integer"
        format: "int32"
        example: 21
      ordered_at:
        type: "string"
        format: "date-time"
        example: "1985-04-12T23:20:50Z"
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      served:
        type: "boolean"
        example: "true = 1, false = 0"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002
      PIN:
        type: "integer"
        format: "int32"
        example: 6832

  Order:
    type: "object"
    properties:
      id:
        type: "string"
      comboID:
        type: "integer"
        format: "int32"
        example: 1
      combo_name:
        type: "string"
        example: "combo 1"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      served:
        type: "boolean"
        example: "true = 1, false = 0"

  Locker_Schedule:
    type: "object"
    properties:
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002
      orders_id:
        type: "string"
        example: "df7cca36-3d7a-40f4-8f06-ae03cc22f041"
      name:
        type: "string"
      token:
        type: "string"

  Ingredient:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 22
      name:
        type: "string"
        example: "Raw Rice"

  Food:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 34
      name:
        type: "string"
        example: "Cooked Rice"

  Combo:
    type: "object"
    properties:
      combo_id:
        type: "integer"
        format: "int32"
        example: 3
      combo_name:
        type: "string"
        example: "combo 1"
      combo_price:
        type: "number"
        format: "float"
      combo_available:
        type: "integer"
        format: "int32"
      photo:
        type: "string"
        format: "byte"

  TimeSchedule:
    type: "object"
    properties:
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      schedule_available:
        type: "boolean"
        example: "true = 1, false = 0"

  ErrorModel:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      err:
        type: "string"

################################################################################
#                                   Parameters                                 #
################################################################################

parameters:

  comboID:
    name: "comboID"
    in: "path"
    description: "The combo identifier number"
    required: true
    type: "integer"
    format: "int32"

  orderID:
    name: "orderID"
    in: "path"
    description: "The order identifier string"
    required: true
    type: "string"

  size:
    name: "size"
    in: "query"
    description: "Size of array to receive"
    required: false
    type: "integer"
    format: "int32"

  offset:
    name: "offset"
    in: "query"
    description: "Start index of the source"
    required: false
    type: "integer"
    format: "int32"
