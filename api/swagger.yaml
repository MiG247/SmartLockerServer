swagger: "2.0"
info:
  version: "1.0.0"
  title: "Smartlocker API"

################################################################################
#                                           Paths                              #
################################################################################


paths:
  /:
    get:
      tags:
      - "Smartlocker"
      description: "Return the landing page."
      operationId: "getHtml"
      produces:
      - "text/html"
      parameters: []
      responses:
        200:
          description: "OK"
      x-swagger-router-controller: "Smartlocker"

  /combo:
    get:
      tags:
      - "Smartlocker"
      description: "Gets an array of 'combo' objects."
      operationId: "getComboArray"
      parameters:
      - $ref: "#/parameters/size"
      - $ref: "#/parameters/offset"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Combo"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /timeschedule:
    get:
      tags:
      - "Smartlocker"
      description: "Gets an array of 'timeschedule' objects."
      operationId: "getTimeSchedule"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TimeSchedule"
        500:
          description: "Error on Database"
          schema:
            $ref: "#/definitions/ErrorModel"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /order:
    post:
      tags:
      - "Smartlocker"
      description: "Requests an order and gets a orderID back if successed"
      operationId: "setOrder"
      parameters:
      - $ref: "#/parameters/comboID"
      - $ref: "#/parameters/pickupTime"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Locker_Schedule"
        404:
          description: "Not Found"
        406:
          description: "Order Not Accepted"
        default:
          description: "unexprected error"
      x-swagger-router-controller: "Smartlocker"

  /order/{orderID}:
    parameters:
    - $ref: "#/parameters/orderID"
    get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from an order"
      operationId: "getOrder"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserOrder"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /combo/food/{combo_id}:
    parameters:
    - $ref: "#/parameters/combo_id"
    get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from a combo the food"
      operationId: "getComboFood"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Food"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

  /combo/ingredient/{combo_id}:
     parameters:
     - $ref: "#/parameters/combo_id"
     get:
      tags:
      - "Smartlocker"
      description: "Gets the basic informations from the food"
      operationId: "getComboIngredient"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ingredient"
        404:
          description: "Not Found"
        default:
          description: "unexpected error"
      x-swagger-router-controller: "Smartlocker"

################################################################################
#                                     Definitions                              #
################################################################################

definitions:

  UserOrder:
    type: "object"
    properties:
      id:
        type: "string"
        example: "df7cca36-3d7a-40f4-8f06-ae03cc22f041"
      combo_id:
        type: "integer"
        format: "int32"
        example: 21
      ordered_at:
        type: "string"
        format: "date-time"
        example: "1985-04-12T23:20:50Z"
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002
      pin:
        type: "integer"
        format: "int32"
        example: 6832
        
  Locker_Schedule:
    type: "object"
    properties:
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      locker_nr:
        type: "integer"
        format: "int32"
        example: 1002
      orders_id:
        type: "string"
        example: "df7cca36-3d7a-40f4-8f06-ae03cc22f041"

  Ingredient:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 22
      name:
        type: "string"
        example: "Raw Rice"

  Food:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 34
      name:
        type: "string"
        example: "Cooked Rice"

  Combo:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 3
      name:
        type: "string"
        example: "combo 1"
      price:
        type: "number"
        format: "float"

  TimeSchedule:
    type: "object"
    properties:
      pickup_time:
        type: "string"
        format: "date-time"
        example: "10:30"
      available:
        type: "boolean"
        example: "true"

  ErrorModel:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      err:
        type: "string"

################################################################################
#                                   Parameters                                 #
################################################################################

parameters:
  comboID:
    name: "comboID"
    in: "query"
    description: "The combo identifier number"
    required: true
    type: "integer"
    format: "int32"

  combo_id:
    name: "combo_id"
    in: "path"
    description: "The combo identifier number"
    required: true
    type: "integer"
    format: "int32"

  pickupTime:
    name: "pickupTime"
    in: "query"
    description: "The time from schedule"
    required: true
    type: "string"

  orderID:
    name: "orderID"
    in: "path"
    description: "The order identifier string"
    required: true
    type: "string"

  size:
    name: "size"
    in: "query"
    description: "Size of array to receive"
    required: false
    type: "integer"
    format: "int32"

  offset:
    name: "offset"
    in: "query"
    description: "Start index of the source"
    required: false
    type: "integer"
    format: "int32"
